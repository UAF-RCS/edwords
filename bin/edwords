#!/bin/ksh
#	edwords - view or edit a 'words' encrypted file
##############################################################################
unset	LADM LETC SUDO NAWK WAMI HOST MAILX UALS SUBJECT LGRP
if [ ! -r /opt/edwords/etc/xtools.cfg ]; then echo "Missing xtools.cfg" >&2; exit 2; fi
	. /opt/edwords/etc/xtools.cfg 

unset	SCRP LSDT WDIR LOGF MAIL BKOT 
	SCRP="${0##*/}"
	LSDT="-Ee%Y%m%d.%H%M"
	WDIR=/var/local/.words	        # Establish words directory
unset	READ OPTS OPTX OPTN NAME FILE LOCK UNLOCK
	READ=default			# Default is to read words
	OPTS=-read			# pre-set for sudo re-invocation
unset	ALERT TRAP VIEW VIXX EDIT SUMR
	ALERT=""			# Default update notification
	SUMR="/usr/bin/sum -r"
if [ ! -x "$MAILX" ]; then	print "missing mailx" >&2;	exit 2;	fi
#############################################################################
function clear_screen	# clear the screen
{	/usr/bin/tput -S <<!EOFT
cup 0 0
clear
!EOFT
unset	I
integer	I=0
while  [ 20 -gt I ]; do	I=$I+1; print "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"; done
}
#.............................................................................
function er_exit	# show error message & exit
{	clear_screen
if [ -n "$TRAP" ]; then	set "$TRAP" 4;	fi	# error trap occurred
if [ -f "$UNLOCK" ]; then	/bin/rm -f $UNLOCK;			fi
	print "$SCRP: $1" >&2;
if [ -n "$2" ]; then	exit $2
else			exit  1
fi
}
#.............................................................................
function ex_usage	# show usage then exit
{
	print "Usage: $SCRP [-read|-write] [-d directory] words-file\n" >&2
if [ -n "$1" ]; then
	print "$SCRP: $1" >&2;					exit 1
else								exit 2
fi
}
##############################################################################
#			# parse any options
while [ -n "$1" -a -z "${1##*-*}" ]; do
	OPTN="${1#-*}";
  case "$OPTN" in
  (w*|W*)	READ="";	EDIT="$VIXX";	OPTS="-write"		;;
  (r*|R*)	READ=$OPTN;	EDIT="$VIEW";	OPTS="-read"		;;
  (d*|D*)	shift 1	
    if [ -z "$1" ]; then ex_usage "unspecified directory";	exit 1;	fi
		WDIR="$1"		# non-default words directory
		OPTX="-d $WDIR"
	;;
  (h*|H*|\?)	ex_usage;					exit 1	;;
  (*)		ex_usage "Invalid option, -$OPTN";		exit 1	;;
  esac
	shift 1
done
if [ -z "$1" ]; then	ex_usage;				exit 1;	fi
if [ -n "$2" ]; then	ex_usage "Too many args";		exit 1;	fi

if [ ! -e "$UALS" ]; then er_exit "missing uals";		exit 1;	fi
if [ ! -d "$WDIR" ]; then er_exit "$WDIR not found";		exit 1;	fi
if [ -z "$WAMI" ]; then	  er_exit "missing whoami";		exit 1;	fi

case "$HOST" in
(dispatch)	VIEW="/bin/view -x";		VIXX="/bin/vi -x"	;;
(admin4)	VIEW="/usr/bin/rvim -x -M";	VIXX="/usr/bin/rvim -x"	;;
(*)				er_exit "do not know $HOST";	exit 1	;;
esac
if [ -z "$READ" ]; then	EDIT="$VIXX";	else	EDIT="$VIEW";		fi

case "$WAMI" in
(root)									;;
(*)
# if [ -z "$READ" ]; then		# only use sudo for write, NOT... need g+w for log and file copy
  	print	"$SCRP: Re-invoking with sudo...\n"
	$SUDO $0 $OPTS $OPTX $1;		 exit $? 
# fi	;;
esac
	LOGF=$WDIR/log			# log of reads, writes, updates
	MAIL=$WDIR/mail			# email notification list
	BKOT=$WDIR/backout
	touch	$LOGF
if [ 0 != $?  ]; then	er_exit "cannot write $LOGF";		exit 1;	fi

if [ -n "$SUDO_USER" ]; then	WAMI="$SUDO_USER";
elif [ -n "$LOGNAME" ]; then	WAMI="$LOGNAME";
else			er_exit "do not know who I really am";	exit 1
fi
case "$1" in					# establish words name
(*words*)	NAME=$1		;;		# as specfified
(*)		NAME=.words.$1	;;		# pre-pend .words
esac
	FILE=$WDIR/$NAME			# Establish filename
if [ ! -f "$FILE" ]; then er_exit "not a file: $NAME";		exit 1;	fi
if [ ! -w "$BKOT" ]; then er_exit "cannot write $BKOT";		exit 1;	fi

if [ -n "$READ" ]; then
	LOCK=$WDIR/$1.$WAMI	# Read-only (copy, don't lock)
else	LOCK=$WDIR/$1.lock	# Establish lockname
  if [ -f "$LOCK" ]; then er_exit "locked, `$UALS -o $LSDT $LOCK`"; exit 1; fi
fi
	/bin/cp -p	$FILE	$LOCK		# Create lock
if [ 0 != $? ]; then	er_exit	"cp $LOCK failed";		exit 1;	fi
	UNLOCK="$LOCK"				# in case of errors

	/bin/chown $WAMI:$LGRP	$LOCK		# Stamp lock
if [ 0 != $? ]; then	er_exit "cannot chown $LOCK";		exit 1;	fi
#.............................................................................
unset	ANS SUM1 SUM2 WAM8 ACC6
typeset -L8 WAM8
typeset -L6 ACC6
	WAM8="$WAMI"
	ACC6="$OPTS"				# Note read in log
print	"`date +%Y-%m-%d.%H:%M:%S` $WAM8 $ACC6 $FILE"	>>$LOGF
if [ 0 != $? ]; then	er_exit "log $LOGF failed";		exit 1;	fi

trap	"TRAP=Error; er_exit" 1 2 3

	$EDIT	$LOCK		# Edit (do the lock... a copy)

	SUM1="`$SUMR $FILE | $NAWK '{print $1}'`"
	SUM2="`$SUMR $LOCK | $NAWK '{print $1}'`"
if [ "$SUM1" = "$SUM2" ]; then er_exit "$NAME not changed" 0;	exit 0;	fi

if [ -n "$READ" ]; then		# Read requested, skip the update
	er_exit "read requested, changes abandoned\n";		exit 1
fi

unset	ANS			# Require a valid answer

while [ -z "$ANS" ]; do
	print "$SCRP: Make this the production file? [y|n] \c"
 	read ANS
	print ""
  case "$ANS" in
  (y*|Y*)
	print "$SCRP: invoking with 'view -x' to validate encryption key\n"
	/bin/cp	-p	$LOCK	$LOCK.v
    if [ 0 != $? ]; then	er_exit	"cp $LOCK.v failed";	exit 1;	fi
	$VIEW	$LOCK		# Validate encryption key OK
	SUM1="`$SUMR $LOCK.v | $NAWK '{print $1}'`"
	SUM2="`$SUMR $LOCK   | $NAWK '{print $1}'`"
    if [ "$SUM1" != "$SUM2" ]; then
	print "$SCRP: validation changed file...\n";	ANS=""
    fi
	/bin/rm -f	$LOCK.v
	;;
  (n*|N*)
	er_exit "abandoning changes" 0;				exit 0;
	;;
  (*)	print "$SCRP: Invalid response: $ANS\n";	ANS=""
	;;
  esac
done

unset	ANS			# Make sure they really want to do this
while [ -z "$ANS" ]; do
	print "$SCRP: Update $NAME? [y|n] \c";	read ANS
  case "$ANS" in
  (y*|Y*)								;;	
  (n*|N*)	er_exit "abandoning changes" 0;			exit 0	;;
  (*)	print "$SCRP: Invalid response: $ANS\n";	ANS=""		;;
  esac
done

#set -x
	/bin/cp		$LOCK	$FILE		# Make file production
	STS=$?
#set +x
if [ 0 != $STS ]; then	er_exit	"cp $LOCK failed";		exit 1;	fi

	ACC6="UPDATE"			# Note update in log
print	"`date +%Y-%m-%d.%H:%M:%S` $WAM8 $ACC6 $FILE"	>>$LOGF

set	`$UALS $LSDT $FILE`		# 1:yyyymmdd.HHMM 2:filename

#set -x
	/bin/mv	$LOCK	$BKOT/$NAME.$1	# Make lock the backout copy
	STS=$?
#set +x
if [ 0 != $STS ]; then	er_exit	"mv $BKOT/$NAME failed";	exit 1;	fi

unset	FILE LOCK ADDR MAILSUB TEXT
#
# Email notification of words change
#
if [ -r "$MAIL" ]; then
	ADDR=`/bin/grep "^$NAME:" $MAIL | $NAWK -F: '{print $2}'`
  if [ -n "$ADDR" ]; then ALERT="$ALERT $ADDR"; fi
fi
if [ -e "$SUBJECT" ]; then	MAILSUB="`$SUBJECT 0 $SCRP $HOST 0 $NAME`"
else				MAILSUB=":??:$SCRP   :$HOST :   0: $NAME:"
fi
print	"
Sending change notification to:
	$ALERT

Enter one line text summarizing changes:
  \c"
read	TEXT

print	"$TEXT" | $MAILX -s "$MAILSUB" $ALERT $WAMI
#
# Purge all but today's file(s) and one other copy
#
	cd $BKOT
/usr/bin/find . -name "$NAME*" -mtime +1 | /bin/sort -r |
while read FILE; do
  if [ -z "$LOCK" ]; then
	LOCK=$FILE;			# skip latest
  else	/bin/rm -f $FILE
  fi
done
	er_exit "Updated file" 0
exit 0
